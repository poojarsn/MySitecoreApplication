<#@ template language="C#"  #>
<#@ assembly name="System.Core" #>

<#@ include file="Helpers.tt" #>
<#@ include file="StringExtensions.tt" #>
<#@ include file="GeneralExtensions.tt" #>
<#@ include file="Inflector.tt" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HedgehogDevelopment.SitecoreProject.VSIP.CodeGeneration.Models" #>

<#@ parameter name="Model" type="HedgehogDevelopment.SitecoreProject.VSIP.CodeGeneration.Models.ProjectHeader" #>
<#@ parameter name="DefaultNamespace" type="System.String" #>

#pragma warning disable 1591
#pragma warning disable 0108
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Team Development for Sitecore.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Linq;

using Glass.Mapper.Sc.Configuration;
using Glass.Mapper.Sc.Configuration.Attributes;

using Sitecore.ContentSearch;
using Sitecore.ContentSearch.Converters;
using Sitecore.Data;
using Sitecore.Globalization;
using System.Web;

<#
// Calculate the top leve namespace as configured in the target project and
// base namespace as defined in the TDS project
string fullNamespace = JoinNamespaces(DefaultNamespace, Model.BaseNamespace);
#>

namespace <#=fullNamespace #>
{

    public interface IGlassBase
    {
        [SitecoreId]
        Guid EntityId{ get; }

        [SitecoreInfo(SitecoreInfoType.Language)]
        Language EntityLanguage{ get; }

        [SitecoreInfo(SitecoreInfoType.Version)]
        int EntityVersion { get; }

        [SitecoreInfo(SitecoreInfoType.ContentPath)]
        string EntityContentPath { get; }

        [SitecoreInfo(SitecoreInfoType.Name)]
        string EntityName { get; }

        [SitecoreInfo(SitecoreInfoType.DisplayName)]
        string EntityDisplayName{ get; }

        [SitecoreInfo(SitecoreInfoType.TemplateId)]
        Guid EntityTemplateId { get; }
    }

    public abstract class GlassBase : IGlassBase
    {
        [SitecoreId]
        [TypeConverter(typeof(IndexFieldGuidValueConverter))]
        [IndexField("_group")]
        public virtual Guid EntityId{ get; set;}

        [TypeConverter(typeof(IndexFieldLanguageValueConverter))]
        [SitecoreInfo(SitecoreInfoType.Language)]
        [IndexField("_language")]
        public virtual Language EntityLanguage{ get; set; }

        [SitecoreIgnore]
        [TypeConverter(typeof(IndexFieldItemUriValueConverter))]
        [IndexField("_uniqueid")]
        public virtual ItemUri EntityUri { get; set; }

        [TypeConverter(typeof(IndexFieldGuidValueConverter))]
        [IndexField("_parent")]
        [SitecoreIgnore]
        public virtual Guid EntityParent { get; set; }

        [IndexField("_path"), TypeConverter(typeof(IndexFieldEnumerableConverter))]
        [SitecoreIgnore]
        public virtual System.Collections.Generic.IEnumerable<Guid> EntityPath { get; set; }

        [SitecoreInfo(SitecoreInfoType.ContentPath)]
        public virtual string EntityContentPath { get; set; }

        [SitecoreInfo(SitecoreInfoType.Name)]
        [IndexField("_name")]
        public virtual string EntityName { get; set; }

        [SitecoreInfo(SitecoreInfoType.DisplayName)]
        public virtual string EntityDisplayName{ get; set; }

        [SitecoreInfo(SitecoreInfoType.Version)]
        public virtual int EntityMappedVersion { get; set; }

        [SitecoreInfo(SitecoreInfoType.Version)]
        public virtual int EntityVersion
        {
                get
                {
                    return EntityUri == null ? EntityMappedVersion : EntityUri.Version.Number;
                }
        }

        [SitecoreInfo(SitecoreInfoType.TemplateId)]
        [TypeConverter(typeof(IndexFieldGuidValueConverter))]
        [IndexField("_template")]
        public virtual Guid EntityTemplateId { get; set; }

        /// <summary>
        /// Gets or set sort able publish date as stored in the index.
        /// This value will be populated by Sitecore Lucene provider from the index.
        /// Used to help index queries. Will be empty if the entity was not read from index.
        /// </summary>
        [SitecoreIgnore]
        [IndexField("_bupa_publishdate")]
        public string PublishDateIndexValue { get; set; }
		
		#region BUPA Additions
		/// <summary>
        /// Constructs parameter for FieldRenderer.Render
        /// </summary>
        /// <param name="isEditable"></param>
        /// <param name="parameters"></param>
        /// <returns></returns>
		public static string GenerateRenderParameter(bool isEditable, string parameters)
			{
				string renderParameter;
				if (!isEditable)
				{
					if (string.IsNullOrEmpty(parameters))
					{
						renderParameter = "disable-web-editing=true";
					}
					else
					{
						renderParameter = "disable-web-editing=true&" + parameters;
					}
				}
				else
				{
					renderParameter = parameters;
				}
				return renderParameter;
			}	
		[SitecoreInfo(SitecoreInfoType.Url)]
        public string Url { get; set; }

		#endregion BUPA Additions
    }
}